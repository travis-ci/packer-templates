#!/bin/bash

if [[ `id -u` -eq 0 ]]; then
	echo "Try again, not as root."
	exit 1
fi

set -o errexit
set -o pipefail

declare -a XCODE_VERSION="9.4"
IOS_VERSIONS="8.1,8.2,8.3,8.4,9.0,9.1,9.2,9.3,10.0,10.1,10.2,10.3"
declare -a RUBIES=('2.3.5' '2.4.3')
DEFAULT_RUBY="2.4.3"
declare -a GEMS=('nomad-cli' 'cocoapods' 'bundler' 'rake' 'xcpretty' 'fastlane')
declare -a BREW_PKGS=('git' 'wget' 'mercurial' 'node' \
  'coreutils' 'postgresql' 'postgis' 'sqlite' 'go' 'gpg' 'carthage' \
  'md5deep' 'pyenv' 'tmate' 'cmake' 'maven' 'gpg2' 'gdbm')
declare -a BREW_XCODE_PKGS=('xctool' 'swiftlint')
declare -a BREW_CASK_PKGS=('java' 'oclint' 'rubymotion' 'xquartz')
declare -a PIP_PKGS=('virtualenv' 'numpy' 'scipy' 'tox')
declare -a NODE_VERSIONS=('6' '5' '4' '0.12' '0.10' '0.8' 'iojs')
export NVM_VERSION="v0.33.2"
export RVM_VERSION="1.29.3"
export DEBUG=1

TRAVIS_SSH_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDEe8yPui0lLZpgaRNghw1H/2SGrpWV7Frw5FkftKGvMjkCL/FP6FeNZOUfWk5qISlhgkjZPu78nioZrUndTjOnSS8pWbecTrQCLKijufOS7A4n212bsdLpMwNuUE8lI1T0i9GcMRYfyK2jm/mosJkED2MomVzBi45NkEjG9IK/OncDcw+i15PDZcwONKZujc04KfNevhCIEt1sGJ0/mffwmQW5KVeKl5RjkKBxlmjo4ZSEVJV0CfzFQaua3c3cSswl3i5RX1wP6ciGfJlI/OZlXdQO4AwtcNFumklJFa2wf6BbRzXsaAieBnc1O2z885rEpXeeOsNzI/z6A+jLwEte2jZgMDh2x5fN3b4Au/iZt7ZhD7241QxN2quz3ej1zjr9MDJizQyzCrOvjvdNWE6CyAjoyF7aYptHCXuSjUbe7i+xx1PQk/MA+lEWAAzW+N4v4nSkHhVcyHnCzZB1WOlmSDNh19CvpF7zwnzs95D25goAH/veImF3RUMzKT5VTETqDgzF1CneAPq16//cIE/fnxtej0e5ZVPbj7oAgPEt0ERIgUo852iLjCHhD2n4juV564yGhs4Gf8eu3aGV+6kzzt8jBZlsiATF1WIwXJQy9Ga8F36v/GZmWVv+NIyRVw0aW1n8xaUzpVBdiNR8u+LvpOX9St6B4Z1iB6m0nhV2Sw== travis@mac"

install_xcode() {
  echo "--- installing xcode"
  sudo gem install --no-document xcode-install
  xcversion install $XCODE_VERSION

  echo "--- installing xcode command line tools"
  xcode-select -p &> /dev/null
  if [ $? -ne 0 ]; then
    echo "Xcode CLI tools not found. Installing them..."
    touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress;
    PROD=$(softwareupdate -l |
      grep "\*.*Command Line" |
      head -n 1 | awk -F"*" '{print $2}' |
      sed -e 's/^ *//' |
      tr -d '\n')
    softwareupdate -i "$PROD" -v;
    rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress;
  else
    echo "Xcode CLI tools OK"
  fi
}


macos_system_prefs_setup() {
  echo "--- setting system preferences."
  sudo systemsetup -settimezone GMT
  sudo systemsetup -setsleep Off
  sudo systemsetup -setcomputersleep Off
  sudo systemsetup -setdisplaysleep Off
  sudo systemsetup -setharddisksleep Off
  sudo systemsetup -setremotelogin on
  defaults write NSGlobalDomain NSAppSleepDisabled -bool YES
}

travis_ssh_key_setup() {
  echo "--- make .ssh/ && set permissions."
  mkdir -p ~/.ssh
  chmod 0700 ~/.ssh

  echo "--- Add Travis SSH key to authorized_keys && set permissions."
  echo "$TRAVIS_SSH_KEY" > ~/.ssh/authorized_keys
  chmod 0600 ~/.ssh/authorized_keys
}

passwordless_sudo_setup() {
  echo "--- Enable passwordless sudo for travis"
  echo 'travis ALL = (ALL) NOPASSWD:ALL' | sudo tee -a /etc/sudoers.d/travis
  sudo chmod 600 /etc/sudoers.d/travis
}

harden_sshd_config() {
  echo "--- Putting hardened sshd config in place"
  sudo tee /etc/ssh/sshd_config <<EOF
# generated by travis
SyslogFacility AUTHPRIV
LogLevel VERBOSE
PubkeyAuthentication yes
AuthorizedKeysFile	.ssh/authorized_keys
PasswordAuthentication no
KbdInteractiveAuthentication no
KerberosAuthentication no
ChallengeResponseAuthentication no
GSSAPIAuthentication no
UsePAM no
UseDNS no
PermitEmptyPasswords no
LoginGraceTime 1m
PermitRootLogin no
UsePrivilegeSeparation sandbox
Subsystem sftp /usr/libexec/sftp-server
EOF

}

dot_bashrc_setup() {
  echo "--- Overwrite .bashrc with our own."
  cat > ~/.bashrc <<EOF
# generated by travis
export LC_ALL="en_US.UTF-8"
export LANG="en_US.UTF-8"
export TRAVIS=true
export CI=true

# help nvm work
export NVM_DIR="\$HOME/.nvm"
[[ -s "\$NVM_DIR/nvm.sh" ]] && source "\$NVM_DIR/nvm.sh"

# help rvm work
export PATH="\$HOME/.rvm/bin:\$PATH"
[[ -s "\$HOME/.rvm/scripts/rvm" ]] && source "\$HOME/.rvm/scripts/rvm"
EOF
}

dot_profile_setup() {
  echo "--- Ensure that ~/.profile loads ~/.bashrc"
  cat > ~/.profile <<EOF
# generated by travis
[[ -s "\$HOME/.bashrc" ]] && source "\$HOME/.bashrc"
EOF
}

dot_bash_profile_setup() {
  echo "--- Ensure that ~/.bash_profile loads ~/.bashrc"
  cat > ~/.bash_profile <<EOF
# generated by travis
[[ -s "\$HOME/.bashrc" ]] && source "\$HOME/.bashrc"
EOF
}

gemrc_setup() {
  echo "--- add 'gem: --no-document' so gem installs don't include documentation"
  cat > ~/.gemrc <<EOF
gem: --no-document
EOF

}

disable_scheduled_software_updates() {
  echo "--- Turn off automatic software updating"
  sudo softwareupdate --schedule off
}

brew_setup() {
  echo "--- Install brew."
  echo | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
}

brew_packages_install() {
  echo "--- Install tools with brew"
  for PKG in "${BREW_PKGS[@]}"; do
      brew install $PKG
  done

  echo "--- Cleaning up after brew"
  brew cleanup
}

brew_xcode_packages_install() {
  # This is separate for when we want to test the packer build process without installing
  # xcode every single time.
  echo "Installing brew packages that depend on xcode"
  for PKG in "${BREW_XCODE_PKGS[@]}"; do
    brew install $PKG
  done

  echo "--- Cleaning up after brew"
  brew cleanup
}

brew_cask_setup() {
  echo "--- Install brew-cask"
  brew tap caskroom/cask
}

brew_cask_packages_install() {
  echo "--- Install tools with brew-cask"
  for PKG in "${BREW_CASK_PKGS[@]}"; do
    brew cask install $PKG
  done

  echo "--- Cleaning up after brew-cask"
  brew cask cleanup
}

python_libraries_install() {
  echo "--- Checking Python Libraries."
  # pip installs should be idempotent.
  for PKG in "${PIP_PKGS[@]}"; do
    echo "--- Installing $PKG"
    pip install $PKG
  done
}

nvm_install() {
    echo "--- Install nvm (version $NVM_VERSION)"
    wget -qO- "https://raw.githubusercontent.com/creationix/nvm/$NVM_VERSION/install.sh" | bash
}

node_versions_install() {
  echo "--- Setting up nvm dir"
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

  # for now we just call install each time, so that already
  # installed versions also get updated.
  echo "--- Installing or updating node versions..."
  for VER in "${NODE_VERSIONS[@]}"; do
    echo "   --- node version $VER"
    . ~/.nvm/nvm.sh install $VER
  done
}

rvm_install() {
  echo "--- Installing rvm."
  gpg --import /tmp/rvm-gpg.key
  curl -sSL https://rvm.io/mpapis.asc | gpg --import -
  curl -sSL https://get.rvm.io | bash -s stable --ignore-dotfiles

  echo "--- Finalizing rvm installation"
  source ~/.bashrc  # complete rvm environment setup

  echo "--- Performing rvm cleanup"
  rvm cleanup all
}

rvmrc_setup(){
  echo "--- Setting up ~/.rvmrc"
  echo "rvm_silence_path_mismatch_check_flag=1" > $HOME/.rvmrc
}

rubies_install() {
  echo "--- Install rubies with rvm"
  for RUBY in "${RUBIES[@]}"; do
    echo "--- Installing ruby version $RUBY"
    rvm install $RUBY
  done

  rvm alias create default $DEFAULT_RUBY
}

common_rubygems_install() {
  # 'do' is 'quoted' because otherwise vim syntax highlighting is v unhappy
  echo "--- Install gems for all rubies"
  for G in "${GEMS[@]}"; do
    for R in $(rvm list strings|grep 'ruby'); do
        echo "--- Installing $G"
        rvm $R 'do' gem install $G
    done
  done

  rvm all 'do' gem cleanup
}

cocoapods_setup() {
  echo "--- Updating Cocoapods."
  pod setup
}

set_env_travisci_true() {
  echo '--- set $CI, $TRAVIS to true'
  sudo tee /etc/launchd.conf <<EOF
setenv CI true
setenv TRAVIS true
EOF
}

setup_travis_runner() {
  cat > ~/runner.rb <<EOF
#!/usr/bin/env ruby

require "pty"
require "socket"

server = TCPServer.new("127.0.0.1", 15782)
socket = server.accept

PTY.spawn("/usr/bin/env", "TERM=xterm", "/bin/bash", "--login", "/Users/travis/build.sh") do |stdout, stdin, pid|
  IO.copy_stream(stdout, socket)

  _, exit_status = Process.wait2(pid)
  File.open("/Users/travis/build.sh.exit", "w") { |f| f.print((exit_status.exitstatus || 127).to_s) }
end

socket.close
EOF

  chmod +x ~/runner.rb

  mkdir -p ~/Library/LaunchAgents
  if [[ -f ~/Library/LaunchAgents/com.travis-ci.runner.plist ]]; then
    sudo chown travis ~/Library/LaunchAgents/com.travis-ci.runner.plist
  fi

  cat > ~/Library/LaunchAgents/com.travis-ci.runner.plist <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.travis-ci.runner</string>
    <key>ProgramArguments</key>
    <array>
        <string>/Users/travis/runner.rb</string>
    </array>
    <key>StandardOutPath</key>
    <string>/Users/travis/runner.rb.out</string>
    <key>StandardErrorPath</key>
    <string>/Users/travis/runner.rb.err</string>
    <key>KeepAlive</key>
    <true/>
</dict>
</plist>
EOF
  sudo chown root ~/Library/LaunchAgents/com.travis-ci.runner.plist
  # needed because of newer security restrictions
  sudo launchctl load ~/Library/LaunchAgents/com.travis-ci.runner.plist
}

xcode_simulator_reset() {
  echo " --- Create simulator devices with fastlane snapshot"
  fastlane snapshot reset_simulators --force --ios_version $IOS_VERSIONS
}

system_info() {
  echo " --- Create /usr/local/travis"
  sudo mkdir -p /usr/local/travis
  sudo chown -R travis /usr/local/travis

  echo " --- Set up system-info"
  git clone https://github.com/travis-ci/system-info.git $HOME/system-info
  rvm use ruby-2.3.5 # some of the pinned dependencies don't work on 2.4.x
  bundle install --gemfile=$HOME/system-info/Gemfile
  BUNDLE_GEMFILE=$HOME/system-info/Gemfile bundle exec $HOME/system-info/exe/system-info report \
    --formats human,json \
    --human-output /usr/local/travis/system_info \
    --json-output /usr/local/travis/system_info.json
  rm -rf system-info
  rvm use $DEFAULT_RUBY
}

software_updates() {
  echo "You may want to install the following:"
  sudo softwareupdate -l -a
  echo "You can do so using 'sudo softwareupdate -i -a'"
}

bootstrap() {
  echo "--- Let's bootstrap this macOS"

  echo "--- Some of what we'll be installing:"
  echo "--- * Rubies: ${RUBIES[@]}"
  echo "--- * brew pkgs: ${BREW_PKGS[@]}"
  echo "--- * brew-cask pkgs: ${BREW_CASK_PKGS[@]}"
  echo "--- * node versions: ${NODE_VERSIONS[@]}"
  echo "--- * nvm version: ${NVM_VERSION[@]}"
  echo "--- * rvm version: ${RVM_VERSION[@]}"

  macos_system_prefs_setup
  travis_ssh_key_setup
  passwordless_sudo_setup
  harden_sshd_config
  dot_bashrc_setup
  dot_profile_setup
  dot_bash_profile_setup
  install_xcode
  gemrc_setup
  disable_scheduled_software_updates
  brew_setup
  brew_cask_setup
  brew_cask_packages_install
  brew_packages_install
  brew_xcode_packages_install
  ###python_libraries_install # pip is unhappy in 10.12.6 and we need to figure out why
  nvm_install
  node_versions_install
  rvm_install
  rubies_install
  common_rubygems_install
  cocoapods_setup
  set_env_travisci_true
  setup_travis_runner
  ###xcode_simulator_reset #fastlane isn't working with xcode 9 yet
  software_updates
  system_info
  rvmrc_setup # This is at the very very very end because for some reason, the presence of .rvmrc makes rvm crash in packer?! :/
}

# Bootstrap things!
bootstrap
