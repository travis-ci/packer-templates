#!/usr/bin/env bash

set -o errexit

main() {
  set -o xtrace
  shopt -s nullglob

  export DEBIAN_FRONTEND='noninteractive'

  if [[ "${PACKER_BUILDER_TYPE}" != docker ]]; then
    __disable_ipv6
  fi
  if ! [[ "$(uname -m)" =~ ppc64 ]]; then
    __enable_i386
  fi
  __wait_for_apt_locks
  __install_packages
  __setup_redis
  __setup_git
  __setup_sshd
  __setup_travis_user
  __write_pre_chef_env
}

__disable_ipv6() {
  sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
  sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1
}

__enable_i386() {
  dpkg --add-architecture i386
}

# Nowa funkcja do czekania na zwolnienie blokad APT
__wait_for_apt_locks() {
  local apt_locks=("/var/lib/dpkg/lock" "/var/lib/apt/lists/lock" "/var/lib/dpkg/lock-frontend" "/var/cache/apt/archives/lock")
  
  for lock in "${apt_locks[@]}"; do
    while fuser "${lock}" >/dev/null 2>&1; do
      echo "Oczekiwanie na zwolnienie blokady ${lock}..."
      sleep 5
    done
  done
}

__install_packages() {
  machine=$(lsb_release -sc)

  if [[ "${PACKER_BUILDER_TYPE}" =~ googlecompute ]]; then
    # Nie usuwamy list repozytoriów całkowicie, tylko czyścimy je
    sudo apt-get clean
  fi

  # Nowoczesne podejście do dodawania klucza GPG Perforce
  wget -qO - https://package.perforce.com/perforce.pubkey | sudo gpg --dearmor -o /usr/share/keyrings/perforce-archive-keyring.gpg
  echo "deb [signed-by=/usr/share/keyrings/perforce-archive-keyring.gpg] http://package.perforce.com/apt/ubuntu ${machine} release" | sudo tee /etc/apt/sources.list.d/perforce.list

  # Czekamy na zwolnienie blokad przed każdą operacją APT
  __wait_for_apt_locks
  sudo apt-get clean
  
  __wait_for_apt_locks
  sudo apt-get autoclean -y
  
  __wait_for_apt_locks
  sudo apt-get autoremove -y
  
  __wait_for_apt_locks
  sudo apt-get update -y
  
  __wait_for_apt_locks
  sudo apt-get install -yqq \
    --no-install-suggests \
    --no-install-recommends \
    ca-certificates \
    cron \
    curl \
    gawk \
    git \
    git-lfs \
    make \
    git-all \
    build-essential \
    libelf-dev \
    sudo \
    wget \
    python3 \
    rsync \
    rabbitmq-server \
    "${APT_GET_INSTALL_PRE_CHEF}"

  # rabbitmq service fix
  sudo systemctl unmask rabbitmq-server.service
}

__setup_redis() {
  echo "Installing the newest redis"
  
  # Nowoczesne podejście do dodawania klucza Redis
  wget -qO - https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg
  echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list
  
  __wait_for_apt_locks
  sudo apt-get update -y
  
  __wait_for_apt_locks
  sudo apt-get install -y redis redis-tools redis-server
  
  sed -ie 's/^bind.*/bind 127.0.0.1/' /etc/redis/redis.conf
}

__setup_git() {
  __wait_for_apt_locks
  sudo apt-get install -y libz-dev libssl-dev libcurl4-gnutls-dev libexpat1-dev gettext cmake gcc
  
  mkdir -p /tmp/git_build
  cd /tmp/git_build
  curl -o git.tar.gz https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.43.0.tar.gz
  tar -zxf git.tar.gz
  cd git-*
  make prefix=/usr/local all
  sudo make prefix=/usr/local install
  cd /
  rm -rf /tmp/git_build
}

__setup_sshd() {
  mkdir -p /var/run/sshd

  if ! grep -Eq '^sshd: ALL: ALLOW' /etc/hosts.allow; then
    echo 'sshd: ALL: ALLOW' >>/etc/hosts.allow
  fi
}

__setup_travis_user() {
  if ! getent passwd travis &>/dev/null; then
    if [[ -z "${TRAVIS_UID}" ]]; then
      useradd -p travis -s /bin/bash -m travis
    else
      useradd -p travis -s /bin/bash -m travis -u "${TRAVIS_UID}"
      groupmod -g "${TRAVIS_UID}" travis
      usermod -u "${TRAVIS_UID}" travis
    fi
  fi

  echo travis:travis | chpasswd

  __setup_sudoers
  __setup_travis_ssh

  # Save users having to create this directory at runtime (it's already on PATH)
  mkdir -p /home/travis/bin

  mkdir -p /opt
  chmod 0755 /opt
  chown -R travis:travis /home/travis /opt
}

__setup_sudoers() {
  sed -i '/^%/d;/^# /d;/^$/d;/^#$/d;/^#includedir/d' /etc/sudoers
  echo '#includedir /etc/sudoers.d' >>/etc/sudoers

  mkdir -p /etc/sudoers.d

  if [[ -f /var/tmp/sudoers.d-travis ]]; then
    cp -v /var/tmp/sudoers.d-travis /etc/sudoers.d/travis
  else
    cat >/etc/sudoers.d/travis <<EOF
travis ALL=(ALL) NOPASSWD:ALL
Defaults !authenticate
Defaults !env_reset
Defaults !mail_badpass
EOF
  fi
  chmod 440 /etc/sudoers.d/travis
}

__setup_travis_ssh() {
  mkdir -p /home/travis/.ssh
  chmod 0700 /home/travis/.ssh

  touch /home/travis/.ssh/authorized_keys
  for f in /var/tmp/*_rsa.pub; do
    cat "${f}" >>/home/travis/.ssh/authorized_keys
  done
  chmod 0600 /home/travis/.ssh/authorized_keys
}

__write_pre_chef_env() {
  local dest=/etc/profile.d/Z99-travis-pre-chef-bootstrap.sh
  cat >"${dest}" <<EOF
#!/bin/sh
# Managed by Packer :heart:

export TRAVIS_PRE_CHEF_BOOTSTRAP_TIME=$(date -u +%Y-%m-%dT%H:%M:%S)
export TRAVIS_UID=${TRAVIS_UID:-2000}
EOF
  chown root:root "${dest}"
  chmod 0755 "${dest}"
}

main "$@"
